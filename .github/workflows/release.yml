name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest tests/ -v

    - name: Run linting
      run: |
        poetry run pylint src/varphi_devkit/ --output-format=text --reports=no --score=no

    - name: Build package
      run: |
        poetry build

    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@v9.12.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: steps.release.outputs.released == 'true'
      # To use trusted publishing, configure your PyPI project settings
      # or uncomment the following lines and add PYPI_API_TOKEN to secrets
      # with:
      #   password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish package distributions to GitHub Releases
      uses: python-semantic-release/upload-to-gh-release@main
      if: steps.release.outputs.released == 'true'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.release.outputs.tag }}