name: Release and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write        # For pushing tags and GitHub release
  id-token: write        # For trusted PyPI publishing

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Lint with pylint
        run: poetry run pylint src/

      - name: Run tests with pytest
        run: poetry run pytest tests/

  release:
    if: github.event_name == 'push' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: lint-and-test
    concurrency:
      group: release-${{ github.ref_name }}
      cancel-in-progress: false

    outputs:
      released: ${{ steps.semantic_release.outputs.released }}
      version_tag: ${{ steps.semantic_release.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Reset to workflow commit SHA
        run: git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          echo "Upstream branch: $UPSTREAM_BRANCH_NAME"
          set -o pipefail
          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"
          UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"
          HEAD_SHA="$(git rev-parse HEAD)"
          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
            echo "::error::Upstream branch has changed, aborting release"
            exit 1
          fi

      - name: Run Semantic Release
        id: semantic_release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          build: true

      - name: Publish GitHub Release Assets
        if: steps.semantic_release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          tag: ${{ steps.semantic_release.outputs.tag }}

  build:
    name: Build distribution
    if: github.event_name == 'push' && github.ref_name == 'main' && needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    needs: release

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install pypa/build
        run: python3 -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/varphi-devkit
    permissions:
      id-token: write  # Mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
